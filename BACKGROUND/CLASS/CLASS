/*
----------------------------------------------------------------------------------------------------------------
---------------------------------------- 스코프 연산자 -------------------------------------------------------------

:: the scope-resolution operator 사용

----------------------------------------------------------------------------------------------------------------
---------------------------------------- 접근 지정자 -------------------------------------------------------------

class CpointXY{

private:
    int m_nX, m_nY;
public:
    void SeXY(int nX, nY){
        m_nX = nX;
        m_nY = nY;
    }
};

protected
- private와 같은 속성
- 상속관계에 있을 때 상위 클래스의 멤버를 하위 클래스에서 private 속성으로 사용 가능

----------------------------------------------------------------------------------------------------------------
------------------------------------------------ 포인터 ---------------------------------------------------------

int main() {

    CPointXY *pPoint = new CPointXY;
    pPoint -> SetXY(7,12);

    delete pPoint

    (new연산자를 생성하면 delete로 제거해줘야 한다.)
}

int _tmain(int argc, TCHAR* argv[]){

CpointXY *pPoint;
// CpointXY의 메모리주소를 저장하는 클래스 변수

pPoint = new CpointXY; 
// CpointXY 안에 있는 변수, 메모리 사용 가능

delete pPoint;
}

Dog = 클래스 이름
happy = 객체 이름
Dog happ, *pd;      int x;
pd = &happy;        pd=&x;
pd->getAge() == happy.getAge();

Dog dd[5];
Dog *pd;
pd = dd; == ****배열의 이름은 그 배열의 시작 주소******
s[i] == *(s+i)
----------------------------------------------------------------------------------------------------------------
----------------------------------------------생성자 (constructor)----------------------------------------------

- 클래스명과 같은 이름 사용
- 생성자에 매개변수를 가질 수 있다.
- 객체 생성 자동 호출 == 객체를 *초기화*하는 함수
- (주로 멤버 변수의 초기화 담당)
- (매개변수는 달라야 한다.) (함수 중첩(overloading)이랑 연관)
- (리턴 값이 존재하지 않으며 void형을 지정해도 안된다.)

- public 속성 가짐 둘 다
----------------------------------------------------------------------------------------------------------------
----------------------------------------------복사 생성자 (constructor)------------------------------------------
- Person(const Person& p) = 
- // 기본 클래스 Person p1;
- // 복사 생성자 Person p3 = p1;


----------------------------------------------------------------------------------------------------------------
--------------------------------------------소멸자 (destructor)--------=---------------------------------------

- 객체가 메모리 해제가 될 때 호출되는 함수

-----------------------------------------------------------------------------------------------------------------
-------------------------------------------- this ---------------------------------------------------------------
- this는 현 객체의 메모리 주소 나타냄
- this를 통해 멤버에 접근할 수 있다. ( -> ) == 포인터 클래스

CPointXY*
- 메모리 주소 리턴 그 메모리의 주소를 받아서
return this;

- 멤버가 호출될 때 (그 멤버가 속한 객체)를 가르킨다.
-----------------------------------------------------------------------------------------------------
------------------------------------------------------- (const) ---------------------------------------------------------------
- void func(const int); // 매개변수가 const
- const double func(int); // 리턴값이 const, reference(&)를 리턴하는 경우
**- void fun(void) const // 함수가 const, (멤버변수를 변경하지 않는) 함수
- 생성자와 소멸자에서는 const (사용 못함)

-----------------------------------------------------------------------------------------------------
------------------------------------------------------- (const) ----------------------------------
- 부모 클래스 = Base class      B
- 자식 클래스 = Derived 클래스  A
- A is a subclass of B
- B is a superclass of A


*/


